buildscript {
    repositories {
        jcenter()
        maven {
            name = "Forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "Sonatype"
            url = 'https://oss.sonatype.org/content/groups/public'
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    }
}

plugins {
    id "com.wynprice.cursemaven" version "2.1.1"
}

apply plugin: "net.minecraftforge.gradle.forge"
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.
import java.time.Year


def username = "${modid}"
if (project.hasProperty("dev_mail")) {
    username = "${dev_mail}"
}
else if(project.hasProperty("dev_username")) {
    username = "${dev_username}"
}

version = "${project.mc_version}-${project.mod_version}"
group = project.maven_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
//noinspection GroovyUnusedAssignment
archivesBaseName = project.modid

sourceCompatibility = targetCompatibility = project.jvm_version // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = project.jvm_version
}

repositories {
    maven {
        //JEI files
        //Mantle
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

minecraft {
    version = "${project.mc_version}-${project.forge_version}"
    if(project.hasProperty('runDir')) {
        runDir = project.runDir
    }
    else if(file("../run").exists()) {
		runDir = "../run"
	}
	else
	{
		runDir = "run"
	}

    mappings = project.forge_mappings
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

	replace "@VERSION@", project.mod_version
    replace "@UPDATE_JSON@", project.update_json

    //auto-configure the run arguments
    clientRunArgs += "--username=${username}"
    if(project.hasProperty('dev_password')) {
        clientRunArgs += "--password=${dev_password}"
    }
    serverRunArgs += "nogui" //mc server GUIs suck :P

    serverJvmArgs += "-Dfml.queryResult=confirm"
}

sourceSets {

	main {
		java {
			srcDir 'src/main/java'
		}
		resources {
			srcDir 'resources'
		}
	}
}

jar {
    manifest.mainAttributes(
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.mod_version}",
            "Built-On": "${project.mc_version}-${project.forge_version}",
            "FMLAT": "${project.modid}_at.cfg"
    )
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

dependencies {

    //JEI (runtime only)
    deobfCompile "mezz.jei:jei_${project.mc_version}:${project.jei_version}"

    deobfProvided "curse.maven:waystones:${project.ws_version}"

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'modid':project.modid, 'name':project.mod_name, 'description':project.mod_description, 'version':project.mod_version, 'mcversion':project.minecraft.version, 'url':project.url, 'updateUrl':project.update_json, 'year':String.valueOf(Year.now().getValue())
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

	//ATs
	rename '(.+_at.cfg)', 'META-INF/$1'
}
